#!/usr/bin/python

import CloudStack
import json, subprocess
from threading import Thread
from Queue import Queue
import urllib2, sys

api = 'http://c11node27:8080/client/api'
apikey = 'YojbgijFzzAPo64t1ZPcAXXMNLFfIK6sNpmCOuNzSOCGzOgmiTqNYdxHJwPzUGYYgUjD8Mao0JM-ymQ3fP_65w'
secret = '9SYWn1Gq1epD_gQL5fhg4SA6R3IShoXOhLkviuZaJdhvtunMxW0yLTbT9jKzs1tOWsqrvmNH0WmSC7WMnpNvjA'
debug = 0
timeout = 1

cloudstack = CloudStack.Client(api, apikey, secret)

vms = []
vmcount = 0

def getVMs():
	global vms
	try:
		vms = cloudstack.listVirtualMachines()
	except urllib2.URLError as e:
		print 'The API server seems to be down.'
		print "ERROR: ", e
		vm = 'Mgmt'
		request(vm, e)
		sys.exit(1)

#wraps system ping command
#def pinger(vm, q):
def pinger(q):
    """Pings subnet"""
    while True:
        #ip = q.get()
        vm = q.get()
	name = vm['displayname']
	#ip = vm.addr
	ip = vm['nic'][0]['ipaddress'] 
        #print "Thread %s: Pinging %s" % (name, ip)
        ret = subprocess.call("ping -c 1 -w %d %s" % (timeout, ip),
                        shell=True,
                        stdout=open('/dev/null', 'w'),
                        stderr=subprocess.STDOUT)
        if ret == 0:
	    if debug:
            	print "%s (%s): is alive" % (ip, name)
	    vm['ping'] = 'OK'
#	    vm.S += 'alive)'
        else:
	    if debug:
            	print "%s (%s): did not respond" % (ip, name)
	    vm['ping'] = 'X'
#	    vm.S += 'timeout)'
        q.task_done()
	#print json.dumps(vm, indent=4)

def printVM(vm):
	global vmcount 
	vmcount += 1
	print '{0:2d}'.format(vmcount),
	#print "{0:30} {1:10} {2:3} {3:14} {4:4} {5:3}".\
	print listformat.\
	format(vm['displayname'][0:18] + ' (' + vm['instancename'] + ')', vm['state'], vm['ping'],\
		vm['nic'][0]['ipaddress'], vm['memory'], vm['haenable'])

#def listVMs(paramState):
def listVMs():
	running = 'Running'
	queue = Queue()

	global rvms, listformat
	rvms = []
	nrvms = []

	print 'No',
	#print "{0:20} {1:10} {2:3} {3:3} {4:3} {5:3}".format('VM Name', 'State', 'Ping', 'Network', 'Memory', 'Disk')
	listformat="{0:30} {1:9} {2:3} {3:13} {4:4} {5:3}"
	#print "{0:30} {1:9} {2:3} {3:13} {4:4} {5:3}".format('VM_Display_Name', \
	print listformat.format('VM_Display_Name', \
		'State', 'Ping', 'Network', 'Memory', 'HA', 'Disk')
	print '-'*80

	for vm in vms:
	    #print json.dumps(vm, indent=4)
		state = vm['state']
		if state != running:
			vm['ping'] = '-'
			nrvms.append(vm)
		else:
			rvms.append(vm)
			worker = Thread(target=pinger, args=(queue, ))
			worker.setDaemon(True)
			worker.start()
			queue.put(vm)		
	queue.join()

	for vm in rvms:
	    	#print json.dumps(vm, indent=4)
		printVM(vm)

	for vm in nrvms:
		printVM(vm)
	print

def request(vm, fmessage):
	import socket               # Import socket module

	s = socket.socket()         # Create a socket object
	host = socket.gethostname() # Get local machine name
	host = 'c11node27'             # Get remote machine name
	port = 9999                # Reserve a port for your service.

	#try:
	s.connect((host, port))
	#except :
		
	s.send('translation request: %s@%s' % (fmessage, vm))
	#s.send('translation request: %s@%s' % (fmessage, vm['displayname']))
	print 'From server: ', s.recv(1024)
	s.close 

def performOp(vm, op):
	#print '<' + vm['displayname'] + ", " + op + '>'	
	if vm['displayname'] == 'centos6':
		args = {}
		args['id'] = vm['id']
		args['displayname'] = 'centos6-3'
		result = cloudstack.updateVirtualMachine(args)
		#print result
	    	print json.dumps(result, indent=4)
		return 1
	return 0

def printOp(vm, op, opcount, result):
	print '{0:2d}'.format(opcount),
	#print "{0:30} {1:10} {2:3} {3:14} {4:4} {5:3}".\
	print opformat.\
	format(op, vm['displayname'][0:18], 'OK', result,\
		'Yes', 'matched')

def monitor():
	print 'No',
	global opformat
	opformat = "{0:8} {1:18} {2:8} {3:8} {4:15} {5:8}"
	#print "{0:5} {1:30} {2:9} {3:3} {4:13} {5:4}".format('Op', \
	print opformat.format('Op', 'VM_Display_Name', 'API_server', 'Result', \
				'Can_handle?', 'Validation')
	print '-'*80

	opcount = 0

	for vm in vms:
		opcount += 1
		op = "rename"
		result = performOp(vm, op)
		if result == 0:
			printOp(vm, op, opcount, result)
			#print op + ' on ' + vm['displayname'] + ' (' + vm['name'] + ') succeeded.'
		else:
			request(vm, op + ' error')
			print op + ' on ' + vm['displayname'] + ' (' + vm['name'] + ') failed.'
			print 'Can the failure be handled?'

getVMs()
#listVMs()
monitor()

