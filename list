#!/usr/bin/python

import CloudStack
import json, subprocess
from threading import Thread
from Queue import Queue

mgmtserver = 'c11node27'
api = 'http://' + mgmtserver + ':8080/client/api'
apikey = 'YojbgijFzzAPo64t1ZPcAXXMNLFfIK6sNpmCOuNzSOCGzOgmiTqNYdxHJwPzUGYYgUjD8Mao0JM-ymQ3fP_65w'
secret = '9SYWn1Gq1epD_gQL5fhg4SA6R3IShoXOhLkviuZaJdhvtunMxW0yLTbT9jKzs1tOWsqrvmNH0WmSC7WMnpNvjA'
debug = 0
timeout = 1

# ping error: Client.py, server is unrecheable
# urllib2.URLError: <urlopen error [Errno 113] No route to host>

cloudstack = CloudStack.Client(api, apikey, secret)
vmcount = 0

#wraps system ping command
#def pinger(vm, q):
def pinger(q):
    """Pings subnet"""
    while True:
        #ip = q.get()
        vm = q.get()
	name = vm['displayname']
	#ip = vm.addr
	ip = vm['nic'][0]['ipaddress'] 
        #print "Thread %s: Pinging %s" % (name, ip)
        ret = subprocess.call("ping -c 1 -w %d %s" % (timeout, ip),
                        shell=True,
                        stdout=open('/dev/null', 'w'),
                        stderr=subprocess.STDOUT)
        if ret == 0:
	    if debug:
            	print "%s (%s): is alive" % (ip, name)
	    vm['ping'] = 'OK'
#	    vm.S += 'alive)'
        else:
	    if debug:
            	print "%s (%s): did not respond" % (ip, name)
	    vm['ping'] = 'X'
#	    vm.S += 'timeout)'
        q.task_done()
	#print json.dumps(vm, indent=4)

#formathead = "{0:25} {1:7} {2:2} {3:13} {4:3} {5:2} {6:2} {7:2}"
#formatstr = "{0:25} {1:8} {2:3} {3:12} {4:4} {5:2} {6:2} {7:2}"
formathead = "{0:25} {1:7} {2:2} {3:13} {4:3} {5:2} {6:2}"
formatstr = "{0:25} {1:8} {2:3} {3:12} {4:4} {5:2} {6:2}"

print 'No',
#print "{0:20} {1:10} {2:3} {3:3} {4:3} {5:3}".format('VM Name', 'State', 'Ping', 'Network', 'Memory', 'Disk')
#print "{0:25} {1:8} {2:3} {3:13} {4:4} {5:3}".format('VM_Display_Name', \
print formathead.format('VM_Display_Name', \
	'State', 'Ping', 'Network', 'RAM', 'CPU', 'HA', 'Disk')
print '-'*80

def printVM(vm):
	global vmcount 
	vmcount += 1
	print '{0:2d}'.format(vmcount),
	#print "{0:25} {1:8} {2:3} {3:14} {4:4} {5:2} {6:2}".\
	print formatstr.\
	format(vm['displayname'][0:18] + ' (' + vm['instancename'] + ')', vm['state'], vm['ping'], vm['nic'][0]['ipaddress'], vm['memory'], \
			vm['cpunumber'], vm['haenable'])
			#vm['cpunumber'], vm['cpuused'], vm['haenable'])

#def listVMs(paramState):
def listVMs():
	vms = cloudstack.listVirtualMachines()
	# api server down: Client.py
	# urllib2.URLError: <urlopen error [Errno 111] Connection refused>

	running = 'Running'
	queue = Queue()
	rvms = []
	nrvms = []

	for vm in vms:
	    #print json.dumps(vm, indent=4)
		state = vm['state']
	    #if state == 'Running':
	    #if (paramState == running and state == paramState) or \
#		(paramState != running and state != running):
		if state != running:
			vm['ping'] = '-'
			nrvms.append(vm)
		else:
			rvms.append(vm)
			worker = Thread(target=pinger, args=(queue, ))
			worker.setDaemon(True)
			worker.start()
			queue.put(vm)		
	queue.join()

	for vm in rvms:
	#	if vm['state'] != running:
	#		vm['ping'] = '-'
	    #if (paramState == running and state == paramState):
	    	#print json.dumps(vm, indent=4)
		printVM(vm)

	for vm in nrvms:
		printVM(vm)

		#print "{0:20} {1:10} {2:3} {3:10} {4:10} {5:10}".format(vm['name'][0:20], vm['state'], 'OK', vm['nic'][0]['ipaddress'], vm['instancename'], vm['memory'])
	    #print repr ((vm['name'], vm['state']))
   	 #print "{0} {1}".format(vm['name'], vm['state'])
 	   #print "%s %s %s" % (vm['id'], vm['name'], vm['state'])

'''
for vm in vms:
    state = vm['state']
    if state != 'Running':
    #print repr (vm['name']), repr (vm['state']).ljust(10)
	vmcount += 1
	print '{0:2d}'.format(vmcount),
	print "{0:20} {1:10}".format(vm['name'][0:20], vm['state'])
'''

listVMs()
#listVMs('Running')
#listVMs('Not Running')

